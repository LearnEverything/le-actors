{"initialI18nStore":{"en":{"common":{"__Debug message":"Hi, I am in English ðŸ‡¬ðŸ‡§"}}},"initialLanguage":"en","i18nServerInstance":null,"pageProps":{"pages":[],"filePath":"release-process","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Release process\"), mdx(\"h2\", null, \"Create a release branch\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"### To the right branch\\ngit checkout main && git pull\\ngit checkout devel && git pull\\n# cat package.json | grep version # to get the current version\\n# git checkout -b release/<next-version>\\ngit merge main # get hot fixes if any\\ngit merge devel\\nrm -Rf node_modules\\nyarn install # no missing module surprise\\nyarn upgrade # update versions to latest Vulcan NPM release\\n\\n\")), mdx(\"h2\", null, \"Run the app, run tests\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"yarn run typecheck\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# Run mongo in a separate shell\\nyarn run start:mongo\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"\\n### Test process\\n# Fix any problem that occur during those tests\\n# Check devel run\\nyarn run dev\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# Check production run\\nyarn run build\\nyarn run start # test the production app\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# Check static build and run\\nyarn run build:static && yarn run start:static\\n# Run tests\\nyarn run test\\n# Run tests specific to Vulcan Next (longer)\\nyarn run test:vn\\n# Test storybook\\nyarn run storybook\\n# Test storybook static build\\nyarn run build:storybook && yarn run start:storybook-static # test storybook  static export\\n\\n# Optionnaly test Docker version (takes a lot of time + not very useful as they don't change often)\\n# yarn run build:docker\\n# yarn run build:test:docker\\n# yarn run start:docker\\n# yarn run test:docker\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"### Versionning\\n# Complete the migrating documentation if there are breaking changes\\nnpm version patch # patch or minor or major depending on the situation\\n# yarn version --new-version <level>  # command for yarn v1\\n# yarn version patch # works only with yarn v2 @see https://github.com/yarnpkg/yarn/issues/5367\\nyarn run auto-changelog # update changelog\\ngit commit -am \\\"bump version\\\"\\n\")), mdx(\"h2\", null, \"Deploy\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"\\n### Deploy\\ngit checkout main && git merge release/<next-version>\\ngit push\\n\\n### Update devel branches with fixes\\ngit checkout develop && git pull && git merge main && git push\\n\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<style data-emotion=\"css o2w69a-MuiTypography-root\">.css-o2w69a-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:300;font-size:6rem;line-height:1.167;letter-spacing:-0.01562em;}</style><h1 class=\"MuiTypography-root MuiTypography-h1 css-o2w69a-MuiTypography-root\">Release process</h1><style data-emotion=\"css 1sra7t5-MuiTypography-root\">.css-1sra7t5-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:300;font-size:3.75rem;line-height:1.2;letter-spacing:-0.00833em;}</style><h2 class=\"MuiTypography-root MuiTypography-h2 css-1sra7t5-MuiTypography-root\">Create a release branch</h2><pre><code class=\"language-sh\">### To the right branch\ngit checkout main &amp;&amp; git pull\ngit checkout devel &amp;&amp; git pull\n# cat package.json | grep version # to get the current version\n# git checkout -b release/&lt;next-version&gt;\ngit merge main # get hot fixes if any\ngit merge devel\nrm -Rf node_modules\nyarn install # no missing module surprise\nyarn upgrade # update versions to latest Vulcan NPM release\n\n</code></pre><style data-emotion=\"css 1sra7t5-MuiTypography-root\">.css-1sra7t5-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:300;font-size:3.75rem;line-height:1.2;letter-spacing:-0.00833em;}</style><h2 class=\"MuiTypography-root MuiTypography-h2 css-1sra7t5-MuiTypography-root\">Run the app, run tests</h2><pre><code class=\"language-sh\">yarn run typecheck\n</code></pre><pre><code class=\"language-sh\"># Run mongo in a separate shell\nyarn run start:mongo\n</code></pre><pre><code class=\"language-sh\">\n### Test process\n# Fix any problem that occur during those tests\n# Check devel run\nyarn run dev\n</code></pre><pre><code class=\"language-sh\"># Check production run\nyarn run build\nyarn run start # test the production app\n</code></pre><pre><code class=\"language-sh\"># Check static build and run\nyarn run build:static &amp;&amp; yarn run start:static\n# Run tests\nyarn run test\n# Run tests specific to Vulcan Next (longer)\nyarn run test:vn\n# Test storybook\nyarn run storybook\n# Test storybook static build\nyarn run build:storybook &amp;&amp; yarn run start:storybook-static # test storybook  static export\n\n# Optionnaly test Docker version (takes a lot of time + not very useful as they don&#x27;t change often)\n# yarn run build:docker\n# yarn run build:test:docker\n# yarn run start:docker\n# yarn run test:docker\n</code></pre><pre><code class=\"language-sh\">### Versionning\n# Complete the migrating documentation if there are breaking changes\nnpm version patch # patch or minor or major depending on the situation\n# yarn version --new-version &lt;level&gt;  # command for yarn v1\n# yarn version patch # works only with yarn v2 @see https://github.com/yarnpkg/yarn/issues/5367\nyarn run auto-changelog # update changelog\ngit commit -am &quot;bump version&quot;\n</code></pre><style data-emotion=\"css 1sra7t5-MuiTypography-root\">.css-1sra7t5-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:300;font-size:3.75rem;line-height:1.2;letter-spacing:-0.00833em;}</style><h2 class=\"MuiTypography-root MuiTypography-h2 css-1sra7t5-MuiTypography-root\">Deploy</h2><pre><code class=\"language-sh\">\n### Deploy\ngit checkout main &amp;&amp; git merge release/&lt;next-version&gt;\ngit push\n\n### Update devel branches with fixes\ngit checkout develop &amp;&amp; git pull &amp;&amp; git merge main &amp;&amp; git push\n\n</code></pre>","scope":{}}},"__N_SSG":true}