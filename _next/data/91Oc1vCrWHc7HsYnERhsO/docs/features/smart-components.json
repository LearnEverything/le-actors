{"initialI18nStore":{"en":{"common":{"__Debug message":"Hi, I am in English ðŸ‡¬ðŸ‡§"}}},"initialLanguage":"en","i18nServerInstance":null,"pageProps":{"pages":[],"filePath":"features/smart-components","source":{"compiledSource":"\"use strict\";\n\nvar _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Smart components (work in progress)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/!\\\\ This work is still in progress, expect a finalized version by the end of 2021\")), mdx(\"h2\", null, \"SmartForm\"), mdx(\"p\", null, \"Vulcan is historically about making it easy to spawn the most generic part of an application, based\\non the structure of your data.\"), mdx(\"p\", null, \"For instance, say you have an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Article\"), \" model and an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Author\"), \" model.\\nVulcan is able to generate a form automatically, depending on the actual fields of each model.\"), mdx(\"p\", null, \"For the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Author\"), \", it could be first name, last name, and date of birth.\\nFor the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Article\"), \", it could be the title, content, and the author unique id.\"), mdx(\"h2\", null, \"Smart Admin Area\"), mdx(\"p\", null, \"Based on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SmartForm\"), \", it's possible to spawn a full admin area for all the models of your application.\\nAs easy as writing a loop!\"), mdx(\"p\", null, \"You can see a demonstration of this approach in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/pages/admin\"), \", or in your application by opening\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"http://localhost:3000/admin\"), \".\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<style data-emotion=\"css o2w69a-MuiTypography-root\">.css-o2w69a-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:300;font-size:6rem;line-height:1.167;letter-spacing:-0.01562em;}</style><h1 class=\"MuiTypography-root MuiTypography-h1 css-o2w69a-MuiTypography-root\">Smart components (work in progress)</h1><style data-emotion=\"css ahj2mt-MuiTypography-root\">.css-ahj2mt-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:400;font-size:1rem;line-height:1.5;letter-spacing:0.00938em;}</style><p class=\"MuiTypography-root MuiTypography-body1 css-ahj2mt-MuiTypography-root\"><strong>/!\\ This work is still in progress, expect a finalized version by the end of 2021</strong></p><style data-emotion=\"css 1sra7t5-MuiTypography-root\">.css-1sra7t5-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:300;font-size:3.75rem;line-height:1.2;letter-spacing:-0.00833em;}</style><h2 class=\"MuiTypography-root MuiTypography-h2 css-1sra7t5-MuiTypography-root\">SmartForm</h2><style data-emotion=\"css ahj2mt-MuiTypography-root\">.css-ahj2mt-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:400;font-size:1rem;line-height:1.5;letter-spacing:0.00938em;}</style><p class=\"MuiTypography-root MuiTypography-body1 css-ahj2mt-MuiTypography-root\">Vulcan is historically about making it easy to spawn the most generic part of an application, based\non the structure of your data.</p><style data-emotion=\"css ahj2mt-MuiTypography-root\">.css-ahj2mt-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:400;font-size:1rem;line-height:1.5;letter-spacing:0.00938em;}</style><p class=\"MuiTypography-root MuiTypography-body1 css-ahj2mt-MuiTypography-root\">For instance, say you have an <code>Article</code> model and an <code>Author</code> model.\nVulcan is able to generate a form automatically, depending on the actual fields of each model.</p><style data-emotion=\"css ahj2mt-MuiTypography-root\">.css-ahj2mt-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:400;font-size:1rem;line-height:1.5;letter-spacing:0.00938em;}</style><p class=\"MuiTypography-root MuiTypography-body1 css-ahj2mt-MuiTypography-root\">For the <code>Author</code>, it could be first name, last name, and date of birth.\nFor the <code>Article</code>, it could be the title, content, and the author unique id.</p><style data-emotion=\"css 1sra7t5-MuiTypography-root\">.css-1sra7t5-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:300;font-size:3.75rem;line-height:1.2;letter-spacing:-0.00833em;}</style><h2 class=\"MuiTypography-root MuiTypography-h2 css-1sra7t5-MuiTypography-root\">Smart Admin Area</h2><style data-emotion=\"css ahj2mt-MuiTypography-root\">.css-ahj2mt-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:400;font-size:1rem;line-height:1.5;letter-spacing:0.00938em;}</style><p class=\"MuiTypography-root MuiTypography-body1 css-ahj2mt-MuiTypography-root\">Based on the <code>SmartForm</code>, it&#x27;s possible to spawn a full admin area for all the models of your application.\nAs easy as writing a loop!</p><style data-emotion=\"css ahj2mt-MuiTypography-root\">.css-ahj2mt-MuiTypography-root{margin:0;font-family:\"Roboto\",\"Helvetica\",\"Arial\",sans-serif;font-weight:400;font-size:1rem;line-height:1.5;letter-spacing:0.00938em;}</style><p class=\"MuiTypography-root MuiTypography-body1 css-ahj2mt-MuiTypography-root\">You can see a demonstration of this approach in <code>src/pages/admin</code>, or in your application by opening\n<code>http://localhost:3000/admin</code>.</p>","scope":{}}},"__N_SSG":true}